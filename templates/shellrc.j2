# vim: filetype=sh
# --
# -- {{ ansible_managed }}
# --

# makes `n` to find its lib and bin
export N_PREFIX={{ dna_home }}

# TODO problem is, you don't know when it fails
safe_import () {
  local filename="$1"

  if [[ -f {{ dna_home }}/lib/${filename} ]]; then
    source {{ dna_home }}/lib/${filename}
  else
    echo "unable to load ${filename}: no such file"
  fi
}

dna_log () {
  local level="$1"; shift;
  local message="$@"

  printf "[ $(date +'%T') ] dna::${level} > ${message}\n"
}

__load_tools () {
  # -- third party utilities
  dna_log "info" "activating z, autoenv"
  safe_import "z.sh"
  safe_import "autoenv/activate.sh"
}

# --
# -- virtual environments
# --

__init_py_virtualenv() {
  export WORKON_HOME="$HOME/.virtualenvs"
  export VIRTUALENVWRAPPER_PYTHON="/usr/local/bin/python2.7"
  export VIRTUALENVWRAPPER_VIRTUALENV="/usr/local/bin/virtualenv"
  export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

  source /usr/local/bin/virtualenvwrapper.sh &>/dev/null
}

__init_go () {
  local go_version="go${1}"
  # -- gvm
  dna_log "info" "initializing go version manager"
  [[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
  [ -z "$(gvm list | grep ${go_version})" ] && gvm install ${go_version}
}

__init_pyenv () {
  local python_version="$1"
  local python_two_version="$2"

  # -- pyenv
  export PYENV_ROOT={{ dna_lib_path }}/pyenv
  export PATH=$PATH:$PYENV_ROOT/bin
  eval "$(pyenv init --path)"
  eval "$(pyenv virtualenv-init -)"
  source "$(pyenv root)/completions/pyenv.zsh"
  # TODO to have both python3 and 2 activated we need to pass them both. It makes the auto installation broken
  pyenv global ${python_version} ${python_two_version} || pyenv install ${python_version}
  dna_log "info" "now using Python $(python -V)"
}

__init_conda () {
  local conda_home="$1"
  export PATH=${conda_home}/bin:$PATH
  # all set !
}

__init_ruby () {
  local ruby_version="$1"

  # -- rbenv
  export PATH="{{ dna_lib_path }}/rbenv/bin:$PATH"
  export RBENV_ROOT="{{ dna_lib_path }}/rbenv/"
  eval "$(rbenv init -)"

  dna_log "info" "initializing ruby version manager"
  # Check if requested ruby version is installed
  [ -z "$(rbenv versions | grep ${ruby_version})" ] && rbenv install ${ruby_version}

  rbenv global ${ruby_version}
  dna_log "info" "now using Ruby ${ruby_version}"
}

__init_node () {
  local node_version="$1"

  # -- install and/or activate node
  n ${node_version}

  command -v ccat || npm install -g ccat
  command -v trash || npm install -g trash-cli

  dna_log "info" "now using node ${node_version}"
}

__load_ssh_keys () {
  # should be set in $HOME/.dna/settings.zsh
  for key in ${SSH_KEYS}; do
    test -f $HOME/.ssh/${key} && ssh-add $HOME/.ssh/${key}
  done
}

__load_ssh_keys
__load_tools

{% if dev.python_pm == "pyenv" %}
  __init_pyenv "{{ dev.python_versions[0] }}"  "{{ dev.python_versions[1] }}"
{% elif dev.python_pm == "conda" %}
  __init_conda "{{ dev.python_home }}"
{% elif dev.python_pm == "virtualenv" %}
  # setup python virtualenv
  export WORKON_HOME={{ dev.python_pm_home }}
  source /usr/local/bin/virtualenvwrapper.sh &>/dev/null
{% endif %}
# __init_go "{{ dev.go_version }}"
# __init_node "{{ dev.node_version }}"
# __init_ruby "{{ dev.ruby_version }}"

test -d "$HOME/.local" && export PATH="$HOME/.local/bin:$PATH"
